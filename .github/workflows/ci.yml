name: CI Pipeline

on:
  push:
    branches:
      - main  # Trigger the workflow when code is pushed to the 'main' branch
  pull_request:
    branches:
      - main  # Trigger on pull requests to 'main'

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code from the repository
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 2: Cache Composer dependencies
      - name: Cache Composer dependencies
        uses: actions/cache@v2
        with:
          path: vendor
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      # Step 3: Set up PHP (for Blade templates and PHP code)
      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'  
          extensions: mbstring

      # Step 4: Install PHP dependencies (using Composer)
      - name: Install PHP dependencies
        run: composer install --no-progress --no-interaction --prefer-dist

      # Step 5: Cache Node.js dependencies
      - name: Cache Node.js dependencies
        uses: actions/cache@v2
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # Step 6: Set up Node.js (for Vue.js and JavaScript dependencies)
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '16'

      # Step 7: Install Node.js dependencies (for Vue.js)
      - name: Install Node.js dependencies
        run: npm ci

      # Step 8: Run PHP linting (checks for syntax errors in PHP files)
      - name: Run PHP lint
        run: find . -name "*.php" -print0 | xargs -0 -n 1 php -l

      # Step 9: Run JavaScript linting (checks for syntax errors in JavaScript files)
      - name: Run JS lint
        run: npm run lint  # Ensure you have a 'lint' script in your package.json

      # Step 10: Log successful deployment
      - name: Log successful deployment
        if: success()
        run: echo "Deployment successful" >> deployment.log

      # Step 11: Log failed deployment
      - name: Log failed deployment
        if: failure()
        run: echo "Deployment failed" >> deployment.log
